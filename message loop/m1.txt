#include "stdafx.h"
#include "WinAPI.h"
#include <tchar.h>
#include <Windows.h>
#include <iostream>

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam) {

	static bool bMouseDown = false;

	switch (iMsg)
	{

	case WM_MOUSEMOVE:
	{
		if (bMouseDown) {
			HDC hDC = GetDC(hWnd);

			LineTo(hDC, LOWORD(lParam), HIWORD(lParam));

			ReleaseDC(hWnd, hDC);
		}

		break;
	}
		
	case WM_LBUTTONDOWN:
	{
		HDC hDC = GetDC(hWnd);
		
		bMouseDown = true;
		MoveToEx(hDC, LOWORD(lParam), HIWORD(lParam), nullptr);

		ReleaseDC(hWnd, hDC);

		break;
	}

	case WM_LBUTTONUP:
	{
		bMouseDown = false;
		
		break;
	}

	case WM_KEYDOWN:
	{
		HDC hDC = GetDC(hWnd);
		ReleaseDC(hWnd, hDC);

		break;
	}

	case WM_CHAR:
	{
		HDC hDC = GetDC(hWnd);
		static std::basic_string<TCHAR> tstr;

		if (wParam == VK_BACK) {
			if (tstr.length() > 0)
			{
				tstr.erase(tstr.end() - 1, tstr.end());
			}

		}
		else {
			tstr += static_cast<TCHAR>(wParam);
		}
		TextOut(hDC, 10, 10, tstr.c_str(), tstr.length());

		ReleaseDC(hWnd, hDC);

		break;
	}
		

	case WM_DESTROY:
		
		PostQuitMessage(0);
		break;
	}


	return DefWindowProc(hWnd, iMsg, wParam, lParam);
}



INT APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE, TCHAR *pszLine, INT nShow)
{
	HWND hWnd;
	WNDCLASS wc;
	MSG msg;

	wc.style = CS_OWNDC;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = LoadIcon(NULL, IDC_ICON);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	//wc.hbrBackground = CreateSolidBrush(RGB(255, 0, 0));
	wc.hbrBackground = reinterpret_cast<HBRUSH>(GetStockObject(WHITE_BRUSH));
	wc.lpszMenuName = NULL;
	wc.lpszClassName = TEXT("MyApp");

	RegisterClass(&wc);

	hWnd = CreateWindow(TEXT("MyApp"), TEXT("Sample Application"),
		WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT,
		CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInstance, NULL);
	ShowWindow(hWnd, SW_SHOW);

	while(GetMessage(&msg, NULL, NULL, NULL)) {
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	
	return 0;
}


